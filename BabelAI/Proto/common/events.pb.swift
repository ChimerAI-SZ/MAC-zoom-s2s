// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Data_Speech_Event_Type: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// 默认事件，适用于不使用事件的方案或不需要传递事件的情况，
  /// 或者对于使用事件的方案，可以通过非0值来校验事件的合法性
  case none // = 0

  /// 1 ~ 49 为上行Connection事件
  case startConnection // = 1

  /// Alias of "StartConnection"
  static let startTask = startConnection
  case finishConnection // = 2

  /// Alias of "FinishConnection"
  static let finishTask = finishConnection

  /// 50 ~ 99 为下行Connection事件
  /// 成功建连
  case connectionStarted // = 50

  /// Alias of "ConnectionStarted"
  static let taskStarted = connectionStarted

  /// 建连失败（可能是无法通过权限认证）
  case connectionFailed // = 51

  /// Alias of "ConnectionFailed"
  static let taskFailed = connectionFailed

  /// 连接结束
  case connectionFinished // = 52

  /// Alias of "ConnectionFinished"
  static let taskFinished = connectionFinished

  /// 100 ~ 149 为上行Session事件
  case startSession // = 100
  case cancelSession // = 101
  case finishSession // = 102

  /// 150 ～ 199 为下行Session事件
  case sessionStarted // = 150
  case sessionCanceled // = 151
  case sessionFinished // = 152
  case sessionFailed // = 153

  /// 用量事件
  case usageResponse // = 154

  /// Alias of "UsageResponse"
  static let chargeData = usageResponse

  /// 200 ~ 249 为上行通用事件
  case taskRequest // = 200
  case updateConfig // = 201
  case imageRequest // = 202

  /// 250 ~ 299 为下行通用事件
  case audioMuted // = 250

  /// 300 ~ 349 为上行TTS事件
  case sayHello // = 300

  /// 350 ~ 399 为下行TTS事件
  case ttssentenceStart // = 350
  case ttssentenceEnd // = 351
  case ttsresponse // = 352
  case ttsended // = 359
  case podcastRoundStart // = 360
  case podcastRoundResponse // = 361
  case podcastRoundEnd // = 362

  /// 450 ~ 499 为下行ASR事件
  case asrinfo // = 450
  case asrresponse // = 451
  case asrended // = 459

  /// 500 ~ 549 为上行对话事件
  /// (Ground-Truth-Alignment) text for speech synthesis
  case chatTtstext // = 500
  case chatTextQuery // = 501

  /// 550 ~ 599 为下行对话事件
  case chatResponse // = 550
  case chimeInStart // = 551
  case chimeInEnd // = 552
  case chatEnded // = 559
  case thinkStart // = 560
  case thinkResponse // = 561
  case thinkEnd // = 562
  case toolOutput // = 563
  case fcresponseStart // = 564
  case fcresponse // = 565
  case fcresponseEnd // = 566

  /// 650 ~ 699 为下行对话事件
  /// Events for source (original) language subtitle.
  case sourceSubtitleStart // = 650
  case sourceSubtitleResponse // = 651
  case sourceSubtitleEnd // = 652

  /// Events for target (translation) language subtitle.
  case translationSubtitleStart // = 653
  case translationSubtitleResponse // = 654
  case translationSubtitleEnd // = 655
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .startConnection
    case 2: self = .finishConnection
    case 50: self = .connectionStarted
    case 51: self = .connectionFailed
    case 52: self = .connectionFinished
    case 100: self = .startSession
    case 101: self = .cancelSession
    case 102: self = .finishSession
    case 150: self = .sessionStarted
    case 151: self = .sessionCanceled
    case 152: self = .sessionFinished
    case 153: self = .sessionFailed
    case 154: self = .usageResponse
    case 200: self = .taskRequest
    case 201: self = .updateConfig
    case 202: self = .imageRequest
    case 250: self = .audioMuted
    case 300: self = .sayHello
    case 350: self = .ttssentenceStart
    case 351: self = .ttssentenceEnd
    case 352: self = .ttsresponse
    case 359: self = .ttsended
    case 360: self = .podcastRoundStart
    case 361: self = .podcastRoundResponse
    case 362: self = .podcastRoundEnd
    case 450: self = .asrinfo
    case 451: self = .asrresponse
    case 459: self = .asrended
    case 500: self = .chatTtstext
    case 501: self = .chatTextQuery
    case 550: self = .chatResponse
    case 551: self = .chimeInStart
    case 552: self = .chimeInEnd
    case 559: self = .chatEnded
    case 560: self = .thinkStart
    case 561: self = .thinkResponse
    case 562: self = .thinkEnd
    case 563: self = .toolOutput
    case 564: self = .fcresponseStart
    case 565: self = .fcresponse
    case 566: self = .fcresponseEnd
    case 650: self = .sourceSubtitleStart
    case 651: self = .sourceSubtitleResponse
    case 652: self = .sourceSubtitleEnd
    case 653: self = .translationSubtitleStart
    case 654: self = .translationSubtitleResponse
    case 655: self = .translationSubtitleEnd
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .startConnection: return 1
    case .finishConnection: return 2
    case .connectionStarted: return 50
    case .connectionFailed: return 51
    case .connectionFinished: return 52
    case .startSession: return 100
    case .cancelSession: return 101
    case .finishSession: return 102
    case .sessionStarted: return 150
    case .sessionCanceled: return 151
    case .sessionFinished: return 152
    case .sessionFailed: return 153
    case .usageResponse: return 154
    case .taskRequest: return 200
    case .updateConfig: return 201
    case .imageRequest: return 202
    case .audioMuted: return 250
    case .sayHello: return 300
    case .ttssentenceStart: return 350
    case .ttssentenceEnd: return 351
    case .ttsresponse: return 352
    case .ttsended: return 359
    case .podcastRoundStart: return 360
    case .podcastRoundResponse: return 361
    case .podcastRoundEnd: return 362
    case .asrinfo: return 450
    case .asrresponse: return 451
    case .asrended: return 459
    case .chatTtstext: return 500
    case .chatTextQuery: return 501
    case .chatResponse: return 550
    case .chimeInStart: return 551
    case .chimeInEnd: return 552
    case .chatEnded: return 559
    case .thinkStart: return 560
    case .thinkResponse: return 561
    case .thinkEnd: return 562
    case .toolOutput: return 563
    case .fcresponseStart: return 564
    case .fcresponse: return 565
    case .fcresponseEnd: return 566
    case .sourceSubtitleStart: return 650
    case .sourceSubtitleResponse: return 651
    case .sourceSubtitleEnd: return 652
    case .translationSubtitleStart: return 653
    case .translationSubtitleResponse: return 654
    case .translationSubtitleEnd: return 655
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Data_Speech_Event_Type] = [
    .none,
    .startConnection,
    .finishConnection,
    .connectionStarted,
    .connectionFailed,
    .connectionFinished,
    .startSession,
    .cancelSession,
    .finishSession,
    .sessionStarted,
    .sessionCanceled,
    .sessionFinished,
    .sessionFailed,
    .usageResponse,
    .taskRequest,
    .updateConfig,
    .imageRequest,
    .audioMuted,
    .sayHello,
    .ttssentenceStart,
    .ttssentenceEnd,
    .ttsresponse,
    .ttsended,
    .podcastRoundStart,
    .podcastRoundResponse,
    .podcastRoundEnd,
    .asrinfo,
    .asrresponse,
    .asrended,
    .chatTtstext,
    .chatTextQuery,
    .chatResponse,
    .chimeInStart,
    .chimeInEnd,
    .chatEnded,
    .thinkStart,
    .thinkResponse,
    .thinkEnd,
    .toolOutput,
    .fcresponseStart,
    .fcresponse,
    .fcresponseEnd,
    .sourceSubtitleStart,
    .sourceSubtitleResponse,
    .sourceSubtitleEnd,
    .translationSubtitleStart,
    .translationSubtitleResponse,
    .translationSubtitleEnd,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Data_Speech_Event_Type: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0None\0\u{9}StartConnection\0\u{1}StartTask\0\u{9}FinishConnection\0\u{1}FinishTask\0\u{a}0ConnectionStarted\0\u{1}TaskStarted\0\u{9}ConnectionFailed\0\u{1}TaskFailed\0\u{9}ConnectionFinished\0\u{1}TaskFinished\0\u{2}0StartSession\0\u{1}CancelSession\0\u{1}FinishSession\0\u{2}0SessionStarted\0\u{1}SessionCanceled\0\u{1}SessionFinished\0\u{1}SessionFailed\0\u{9}UsageResponse\0\u{1}ChargeData\0\u{2}.TaskRequest\0\u{1}UpdateConfig\0\u{1}ImageRequest\0\u{2}0AudioMuted\0\u{2}2SayHello\0\u{2}2TTSSentenceStart\0\u{1}TTSSentenceEnd\0\u{1}TTSResponse\0\u{2}\u{7}TTSEnded\0\u{1}PodcastRoundStart\0\u{1}PodcastRoundResponse\0\u{1}PodcastRoundEnd\0\u{2}X\u{1}ASRInfo\0\u{1}ASRResponse\0\u{2}\u{8}ASREnded\0\u{2})ChatTTSText\0\u{1}ChatTextQuery\0\u{2}1ChatResponse\0\u{1}ChimeInStart\0\u{1}ChimeInEnd\0\u{2}\u{7}ChatEnded\0\u{1}ThinkStart\0\u{1}ThinkResponse\0\u{1}ThinkEnd\0\u{1}ToolOutput\0\u{1}FCResponseStart\0\u{1}FCResponse\0\u{1}FCResponseEnd\0\u{2}T\u{1}SourceSubtitleStart\0\u{1}SourceSubtitleResponse\0\u{1}SourceSubtitleEnd\0\u{1}TranslationSubtitleStart\0\u{1}TranslationSubtitleResponse\0\u{1}TranslationSubtitleEnd\0")
}
