// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: products/understanding/ast/ast_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Data_Speech_Ast_ReqParams: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 可能是s2t , s2s 选一个, 控制是否需要语音
  var mode: String {
    get {return _storage._mode}
    set {_uniqueStorage()._mode = newValue}
  }

  /// 源语言
  var sourceLanguage: String {
    get {return _storage._sourceLanguage}
    set {_uniqueStorage()._sourceLanguage = newValue}
  }

  /// 目标语言
  var targetLanguage: String {
    get {return _storage._targetLanguage}
    set {_uniqueStorage()._targetLanguage = newValue}
  }

  var speakerID: String {
    get {return _storage._speakerID}
    set {_uniqueStorage()._speakerID = newValue}
  }

  var corpus: Data_Speech_Understanding_Corpus {
    get {return _storage._corpus ?? Data_Speech_Understanding_Corpus()}
    set {_uniqueStorage()._corpus = newValue}
  }
  /// Returns true if `corpus` has been explicitly set.
  var hasCorpus: Bool {return _storage._corpus != nil}
  /// Clears the value of `corpus`. Subsequent reads from it will return its default value.
  mutating func clearCorpus() {_uniqueStorage()._corpus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Data_Speech_Ast_TranslateRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestMeta: Data_Speech_Common_RequestMeta {
    get {return _storage._requestMeta ?? Data_Speech_Common_RequestMeta()}
    set {_uniqueStorage()._requestMeta = newValue}
  }
  /// Returns true if `requestMeta` has been explicitly set.
  var hasRequestMeta: Bool {return _storage._requestMeta != nil}
  /// Clears the value of `requestMeta`. Subsequent reads from it will return its default value.
  mutating func clearRequestMeta() {_uniqueStorage()._requestMeta = nil}

  var event: Data_Speech_Event_Type {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  var user: Data_Speech_Understanding_User {
    get {return _storage._user ?? Data_Speech_Understanding_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  /// bytes data = 2;               // request binary data
  var sourceAudio: Data_Speech_Understanding_Audio {
    get {return _storage._sourceAudio ?? Data_Speech_Understanding_Audio()}
    set {_uniqueStorage()._sourceAudio = newValue}
  }
  /// Returns true if `sourceAudio` has been explicitly set.
  var hasSourceAudio: Bool {return _storage._sourceAudio != nil}
  /// Clears the value of `sourceAudio`. Subsequent reads from it will return its default value.
  mutating func clearSourceAudio() {_uniqueStorage()._sourceAudio = nil}

  /// 目标音频信息，只需要传format（pcm/ogg）、rate、bits、channel这些
  var targetAudio: Data_Speech_Understanding_Audio {
    get {return _storage._targetAudio ?? Data_Speech_Understanding_Audio()}
    set {_uniqueStorage()._targetAudio = newValue}
  }
  /// Returns true if `targetAudio` has been explicitly set.
  var hasTargetAudio: Bool {return _storage._targetAudio != nil}
  /// Clears the value of `targetAudio`. Subsequent reads from it will return its default value.
  mutating func clearTargetAudio() {_uniqueStorage()._targetAudio = nil}

  /// 请求参数
  var request: Data_Speech_Ast_ReqParams {
    get {return _storage._request ?? Data_Speech_Ast_ReqParams()}
    set {_uniqueStorage()._request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  var hasRequest: Bool {return _storage._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  mutating func clearRequest() {_uniqueStorage()._request = nil}

  /// 是否开启降噪
  var denoise: Bool {
    get {return _storage._denoise ?? false}
    set {_uniqueStorage()._denoise = newValue}
  }
  /// Returns true if `denoise` has been explicitly set.
  var hasDenoise: Bool {return _storage._denoise != nil}
  /// Clears the value of `denoise`. Subsequent reads from it will return its default value.
  mutating func clearDenoise() {_uniqueStorage()._denoise = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Data_Speech_Ast_TranslateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var responseMeta: Data_Speech_Common_ResponseMeta {
    get {return _responseMeta ?? Data_Speech_Common_ResponseMeta()}
    set {_responseMeta = newValue}
  }
  /// Returns true if `responseMeta` has been explicitly set.
  var hasResponseMeta: Bool {return self._responseMeta != nil}
  /// Clears the value of `responseMeta`. Subsequent reads from it will return its default value.
  mutating func clearResponseMeta() {self._responseMeta = nil}

  var event: Data_Speech_Event_Type = .none

  /// response binary data
  var data: Data = Data()

  /// 原文或者译文
  var text: String = String()

  var startTime: Int32 = 0

  var endTime: Int32 = 0

  var spkChg: Bool = false

  var mutedDurationMs: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _responseMeta: Data_Speech_Common_ResponseMeta? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "data.speech.ast"

extension Data_Speech_Ast_ReqParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReqParams"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}mode\0\u{3}source_language\0\u{3}target_language\0\u{3}speaker_id\0\u{2}`\u{1}corpus\0")

  fileprivate class _StorageClass {
    var _mode: String = String()
    var _sourceLanguage: String = String()
    var _targetLanguage: String = String()
    var _speakerID: String = String()
    var _corpus: Data_Speech_Understanding_Corpus? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mode = source._mode
      _sourceLanguage = source._sourceLanguage
      _targetLanguage = source._targetLanguage
      _speakerID = source._speakerID
      _corpus = source._corpus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._mode) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._sourceLanguage) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._targetLanguage) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._speakerID) }()
        case 100: try { try decoder.decodeSingularMessageField(value: &_storage._corpus) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._mode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mode, fieldNumber: 1)
      }
      if !_storage._sourceLanguage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceLanguage, fieldNumber: 2)
      }
      if !_storage._targetLanguage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetLanguage, fieldNumber: 3)
      }
      if !_storage._speakerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._speakerID, fieldNumber: 4)
      }
      try { if let v = _storage._corpus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_Speech_Ast_ReqParams, rhs: Data_Speech_Ast_ReqParams) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mode != rhs_storage._mode {return false}
        if _storage._sourceLanguage != rhs_storage._sourceLanguage {return false}
        if _storage._targetLanguage != rhs_storage._targetLanguage {return false}
        if _storage._speakerID != rhs_storage._speakerID {return false}
        if _storage._corpus != rhs_storage._corpus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_Speech_Ast_TranslateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TranslateRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}request_meta\0\u{1}event\0\u{1}user\0\u{3}source_audio\0\u{3}target_audio\0\u{1}request\0\u{1}denoise\0")

  fileprivate class _StorageClass {
    var _requestMeta: Data_Speech_Common_RequestMeta? = nil
    var _event: Data_Speech_Event_Type = .none
    var _user: Data_Speech_Understanding_User? = nil
    var _sourceAudio: Data_Speech_Understanding_Audio? = nil
    var _targetAudio: Data_Speech_Understanding_Audio? = nil
    var _request: Data_Speech_Ast_ReqParams? = nil
    var _denoise: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _requestMeta = source._requestMeta
      _event = source._event
      _user = source._user
      _sourceAudio = source._sourceAudio
      _targetAudio = source._targetAudio
      _request = source._request
      _denoise = source._denoise
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._requestMeta) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._event) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._sourceAudio) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._targetAudio) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._request) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._denoise) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._requestMeta {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._event != .none {
        try visitor.visitSingularEnumField(value: _storage._event, fieldNumber: 2)
      }
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._sourceAudio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._targetAudio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._denoise {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_Speech_Ast_TranslateRequest, rhs: Data_Speech_Ast_TranslateRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._requestMeta != rhs_storage._requestMeta {return false}
        if _storage._event != rhs_storage._event {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._sourceAudio != rhs_storage._sourceAudio {return false}
        if _storage._targetAudio != rhs_storage._targetAudio {return false}
        if _storage._request != rhs_storage._request {return false}
        if _storage._denoise != rhs_storage._denoise {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_Speech_Ast_TranslateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TranslateResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}response_meta\0\u{1}event\0\u{1}data\0\u{1}text\0\u{3}start_time\0\u{3}end_time\0\u{3}spk_chg\0\u{3}muted_duration_ms\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._responseMeta) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.event) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.startTime) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.endTime) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.spkChg) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.mutedDurationMs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._responseMeta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.event != .none {
      try visitor.visitSingularEnumField(value: self.event, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    if self.startTime != 0 {
      try visitor.visitSingularInt32Field(value: self.startTime, fieldNumber: 5)
    }
    if self.endTime != 0 {
      try visitor.visitSingularInt32Field(value: self.endTime, fieldNumber: 6)
    }
    if self.spkChg != false {
      try visitor.visitSingularBoolField(value: self.spkChg, fieldNumber: 7)
    }
    if self.mutedDurationMs != 0 {
      try visitor.visitSingularInt32Field(value: self.mutedDurationMs, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_Speech_Ast_TranslateResponse, rhs: Data_Speech_Ast_TranslateResponse) -> Bool {
    if lhs._responseMeta != rhs._responseMeta {return false}
    if lhs.event != rhs.event {return false}
    if lhs.data != rhs.data {return false}
    if lhs.text != rhs.text {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.spkChg != rhs.spkChg {return false}
    if lhs.mutedDurationMs != rhs.mutedDurationMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
